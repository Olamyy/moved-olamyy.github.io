<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Olamilekan Wahab</title><link href="https://olamilekanwahab.com/" rel="alternate"></link><link href="https://olamilekanwahab.com/feeds/all.atom.xml" rel="self"></link><id>https://olamilekanwahab.com/</id><updated>2018-12-05T10:00:00+01:00</updated><subtitle>Checks and Balances</subtitle><entry><title>Deep Matrix Factorization</title><link href="https://olamilekanwahab.com/blog/2018/12/05/deep-matrix-factorization/" rel="alternate"></link><published>2018-12-05T10:00:00+01:00</published><updated>2018-12-05T10:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2018-12-05:blog/2018/12/05/deep-matrix-factorization/</id><summary type="html">&lt;p&gt;Recommender Systems (RecSys) use learning models to identify items(products) that a person is most likely to purchase based on that person's past records. Past records here range from spending patterns, products, ratings, view patterns, click patterns etc. Konga, Jumia, Netflix and Amazon are typical example of companies that use …&lt;/p&gt;</summary><category term="deep learning"></category><category term="matrix decomposition"></category><category term="matrix factorization"></category><category term="keras"></category></entry><entry><title>Deep Learning approach to Part of Speech Tagging</title><link href="https://olamilekanwahab.com/blog/2018/12/01/pos-neural-networks/" rel="alternate"></link><published>2018-12-01T10:00:00+01:00</published><updated>2018-12-01T10:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2018-12-01:blog/2018/12/01/pos-neural-networks/</id><summary type="html">&lt;p&gt;Words are often very ambiguous in their part of speech.
The word &lt;strong&gt;pound&lt;/strong&gt; for example can be either a noun, a finite or infinite verb. The distinction in most cases is always in the context of the word. Part of Speech tagging is the processing of automatically assinging a &lt;strong&gt;part …&lt;/strong&gt;&lt;/p&gt;</summary><category term="simulation"></category><category term="statistics"></category></entry><entry><title>Generating Yoruba Names using Char-RNN</title><link href="https://olamilekanwahab.com/blog/2018/06/02/generating-yoruba-names-using-char-rnn/" rel="alternate"></link><published>2018-06-02T00:00:00+01:00</published><updated>2018-06-02T00:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2018-06-02:blog/2018/06/02/generating-yoruba-names-using-char-rnn/</id><summary type="html">&lt;p&gt;Last week, I was bored. &lt;/p&gt;
&lt;p&gt;Mainly because most of the work I did during the week was theoretical.
Reading papers(&lt;a href="https://arxiv.org/abs/1206.5538"&gt;this&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/cond-mat/0606005"&gt;this&lt;/a&gt;, &lt;a href="https://arxiv.org/abs/1707.02410"&gt;this&lt;/a&gt;, and &lt;a href="https://arxiv.org/abs/1802.07740"&gt;this&lt;/a&gt;), 
trying to get familiar with some concepts in differential calculus and making my first set of changes to the sklearn library.&lt;/p&gt;
&lt;p&gt;On friday night, I …&lt;/p&gt;</summary><category term="deep-learning"></category><category term="char-rnn"></category><category term="python"></category><category term="texgenrnn"></category><category term="yoruba"></category><category term="yorubanames"></category></entry><entry><title>The Sklearn API Design Principles</title><link href="https://olamilekanwahab.com/blog/2018/05/05/the-sklearn-api-design-principles/" rel="alternate"></link><published>2018-05-05T00:00:00+01:00</published><updated>2018-05-05T00:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2018-05-05:blog/2018/05/05/the-sklearn-api-design-principles/</id><summary type="html">&lt;p&gt;Some weeks back, I decided to start contributing to the open source scikit-learn library. This decision led me to read a whole lot of sklearn's code, documentation , contribution and 
online guides.&lt;/p&gt;
&lt;p&gt;This article is an attempt to document everything I learnt about the design principles behind the library.&lt;/p&gt;
&lt;p&gt;The rest …&lt;/p&gt;</summary><category term="machine-learning"></category><category term="sklearn"></category><category term="python"></category></entry><entry><title>Locally Weighted Regression</title><link href="https://olamilekanwahab.com/blog/2018/01/30/locally-weighted-regression/" rel="alternate"></link><published>2018-01-30T00:00:00+01:00</published><updated>2018-01-30T00:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2018-01-30:blog/2018/01/30/locally-weighted-regression/</id><summary type="html">&lt;p&gt;A couple of weeks back, I started a review of the linear models I've used over the years and and I realized that I never really understood how the locally weighted regression algorithm works. This and the fact that &lt;code&gt;sklearn&lt;/code&gt; had no support for it, encouraged me to do an …&lt;/p&gt;</summary><category term="Maths"></category><category term="Python"></category><category term="regression"></category><category term="lwr"></category></entry><entry><title>Introduction To The Fast Fourier Transform In Python</title><link href="https://olamilekanwahab.com/blog/2017/11/01/introduction-to-the-fast-fourier-transform-in-python/" rel="alternate"></link><published>2017-11-01T00:00:00+01:00</published><updated>2017-11-01T00:00:00+01:00</updated><author><name>Olamilekan Wahab</name></author><id>tag:olamilekanwahab.com,2017-11-01:blog/2017/11/01/introduction-to-the-fast-fourier-transform-in-python/</id><summary type="html">&lt;p&gt;The Fast Fourier Transform is an algorithmic optimization of the Discrete Fourier Transform.&lt;/p&gt;
&lt;p&gt;I came across it a couple of weeks back and found it quite interesting because it's based on a topic I had previously done in class but never really got to use. In this post, I would …&lt;/p&gt;</summary><category term="MachineLearning"></category><category term="Maths"></category><category term="Python"></category><category term="Fourier"></category></entry></feed>